name: CI • WDIO + Allure (Official Pages w/ history per env)

on:
  push:
    branches: ["master"] # або main, якщо потрібно
  pull_request:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment (.env.*)"
        type: choice
        default: prod
        options: [dev, staging, prod]
      browsers:
        description: "Which browsers to run"
        type: choice
        default: both
        options: [chrome, firefox, both]
      spec_path:
        description: "Optional: run single spec (e.g. test/specs/smoke.status.e2e.ts)"
        type: string
        required: false

permissions:
  contents: read # для checkout; права на Pages будуть в deploy job

jobs:
  e2e:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        run: npm ci

      # Встановлюємо дефолти для run, якщо ручного запуску не було
      - name: Resolve inputs defaults
        run: |
          echo "RUN_ENV=${{ inputs.environment || 'prod' }}" >> $GITHUB_ENV
          echo "RUN_BROWSERS=${{ inputs.browsers || 'both' }}" >> $GITHUB_ENV
          if [ -n "${{ inputs.spec_path }}" ]; then
            echo "SPEC_ARG=-- --spec ${{ inputs.spec_path }}" >> $GITHUB_ENV
          else
            echo "SPEC_ARG=" >> $GITHUB_ENV
          fi

      # Chrome
      - name: Run Chrome tests (${{ env.RUN_ENV }})
        if: ${{ env.RUN_BROWSERS == 'chrome' || env.RUN_BROWSERS == 'both' || github.event_name != 'workflow_dispatch' }}
        run: npm run test:${RUN_ENV}:chrome $SPEC_ARG
        env:
          CI: "true"

      # Firefox
      - name: Run Firefox tests (${{ env.RUN_ENV }})
        if: ${{ env.RUN_BROWSERS == 'firefox' || env.RUN_BROWSERS == 'both' || github.event_name != 'workflow_dispatch' }}
        run: npm run test:${RUN_ENV}:firefox $SPEC_ARG
        env:
          CI: "true"

      # ---------- ІСТОРІЯ ALLURE (кешуємо по гілці + середовищу) ----------
      - name: Restore history cache
        if: always()
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: .allure-history
          key: allure-history-${{ github.ref_name }}-${{ env.RUN_ENV }}
          restore-keys: |
            allure-history-${{ github.ref_name }}-
            allure-history-

      - name: Bring history into allure-results
        if: always()
        run: |
          if [ -d ".allure-history" ]; then
            mkdir -p allure-results/history
            cp -R .allure-history/* allure-results/history/ || true
          fi

      # ---------- ГЕНЕРАЦІЯ ЗВІТУ ----------
      - name: Generate Allure report (always)
        if: always()
        run: |
          npm run report:allure:generate || true
          touch allure-report/.nojekyll
          ls -lah allure-report || true

      # Оновлюємо кеш історії на наступний прогін
      - name: Update history cache folder
        if: always()
        run: |
          rm -rf .allure-history
          mkdir -p .allure-history
          if [ -d "allure-report/history" ]; then
            cp -R allure-report/history/* .allure-history/ || true
          fi

      # Артефакт для Pages (офіційний)
      - name: Upload Pages artifact
        if: always()
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./allure-report

      # Зберігаємо кеш з оновленою історією
      - name: Save history cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: .allure-history
          key: allure-history-${{ github.ref_name }}-${{ env.RUN_ENV }}

  deploy:
    needs: e2e
    if: always()
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages (official)
        id: deployment
        uses: actions/deploy-pages@v4
